// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace HeySteimke.Services.Rest
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for HeySteimkePlaces.
    /// </summary>
    public static partial class HeySteimkePlacesExtensions
    {
            /// <summary>
            /// Returns ids of existing Places
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<int?> GetAvaiPlaceIds(this IHeySteimkePlaces operations)
            {
                return Task.Factory.StartNew(s => ((IHeySteimkePlaces)s).GetAvaiPlaceIdsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns ids of existing Places
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetAvaiPlaceIdsAsync(this IHeySteimkePlaces operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAvaiPlaceIdsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns Specific Place by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of Place to get
            /// </param>
            public static Place GetPlace(this IHeySteimkePlaces operations, int id)
            {
                return Task.Factory.StartNew(s => ((IHeySteimkePlaces)s).GetPlaceAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Specific Place by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of Place to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Place> GetPlaceAsync(this IHeySteimkePlaces operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPlaceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace existing Place
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of Place to get
            /// </param>
            /// <param name='user'>
            /// Place to replace
            /// </param>
            public static void ReplacePlace(this IHeySteimkePlaces operations, int id, Place user)
            {
                Task.Factory.StartNew(s => ((IHeySteimkePlaces)s).ReplacePlaceAsync(id, user), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace existing Place
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of Place to get
            /// </param>
            /// <param name='user'>
            /// Place to replace
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReplacePlaceAsync(this IHeySteimkePlaces operations, int id, Place user, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ReplacePlaceWithHttpMessagesAsync(id, user, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Remove Place
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of Place to delete
            /// </param>
            public static void DeletePlace(this IHeySteimkePlaces operations, int id)
            {
                Task.Factory.StartNew(s => ((IHeySteimkePlaces)s).DeletePlaceAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove Place
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of Place to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePlaceAsync(this IHeySteimkePlaces operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeletePlaceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add Place
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='place'>
            /// place to add
            /// </param>
            public static void AddPlace(this IHeySteimkePlaces operations, Place place)
            {
                Task.Factory.StartNew(s => ((IHeySteimkePlaces)s).AddPlaceAsync(place), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Place
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='place'>
            /// place to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddPlaceAsync(this IHeySteimkePlaces operations, Place place, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AddPlaceWithHttpMessagesAsync(place, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
