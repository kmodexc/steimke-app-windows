// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace HeySteimke.Rest.HeySteimkeBase
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for HeySteimkeBaseClient.
    /// </summary>
    public static partial class HeySteimkeBaseClientExtensions
    {
            /// <summary>
            /// check if server alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string Ping(this IHeySteimkeBaseClient operations)
            {
                return Task.Factory.StartNew(s => ((IHeySteimkeBaseClient)s).PingAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// check if server alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PingAsync(this IHeySteimkeBaseClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PingWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns ids of existing items
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<int?> GetAvaiIds(this IHeySteimkeBaseClient operations)
            {
                return Task.Factory.StartNew(s => ((IHeySteimkeBaseClient)s).GetAvaiIdsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns ids of existing items
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetAvaiIdsAsync(this IHeySteimkeBaseClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAvaiIdsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns Specific item by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of item to get
            /// </param>
            public static Item GetItem(this IHeySteimkeBaseClient operations, int id)
            {
                return Task.Factory.StartNew(s => ((IHeySteimkeBaseClient)s).GetItemAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Specific item by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of item to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Item> GetItemAsync(this IHeySteimkeBaseClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace existing item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of item to get
            /// </param>
            /// <param name='item'>
            /// Item to replace
            /// </param>
            public static void ReplaceItem(this IHeySteimkeBaseClient operations, int id, Item item)
            {
                Task.Factory.StartNew(s => ((IHeySteimkeBaseClient)s).ReplaceItemAsync(id, item), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace existing item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of item to get
            /// </param>
            /// <param name='item'>
            /// Item to replace
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReplaceItemAsync(this IHeySteimkeBaseClient operations, int id, Item item, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ReplaceItemWithHttpMessagesAsync(id, item, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Remove Item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of item to get
            /// </param>
            public static void DeleteItem(this IHeySteimkeBaseClient operations, int id)
            {
                Task.Factory.StartNew(s => ((IHeySteimkeBaseClient)s).DeleteItemAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove Item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of item to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteItemAsync(this IHeySteimkeBaseClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteItemWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add Item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// Item to add
            /// </param>
            public static void AddItem(this IHeySteimkeBaseClient operations, Item item)
            {
                Task.Factory.StartNew(s => ((IHeySteimkeBaseClient)s).AddItemAsync(item), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// Item to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddItemAsync(this IHeySteimkeBaseClient operations, Item item, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AddItemWithHttpMessagesAsync(item, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
